[ -e "$HOME/.config/zsh/temporary" ] && source ~/.config/zsh/temporary || :

forever() { while sleep 0.5; do "$@"; done }

f() {
    if [ -z "$1" ]; then p="$(pwd)"; else p="$1"; fi
    echo -n "file://$(realpath $p)" | tee >(xclip) | tee >(xclip -selection clip)
}

fp() {
    echo -n "$(realpath "$(if [ -z "$1" ]; then echo "$(pwd)"; else echo "$1"; fi)")" | tee >(xclip) | tee >(xclip -selection clip)
}

tmpcd() { cd "$(mktemp -d /tmp/sand-XXX)"; }
tmppd() { cd "$(mktemp -d $HOME/tmp/sand-XXX)"; } # persistent
cdl() { cd $(dirlast "$1") }
cb() { cd "$(dirname "$1")"; } # cd to filename's location

pk9f() { pkill -9 -f "$@"; }
which-cat () { less "$(which "$1")" }

nix-revsha() { nix-prefetch-git "$@" | jq -r '"  rev = \"\(.rev)\";\n  sha256 = \"\(.sha256)\";"' | tee >(c); }
no() { a="$1"; shift; nixops "$a" -s localstate.nixops "$@"; }

tmx-sel() { tmx $(tmux ls -F '#{session_name}' | fzf); }
tda() { tmux detach -a; }
# tmux-term() {  run urxvt -e term specific "$(tmux display-message -p '#S')" }

zns() { nix-shell "$@" --run zsh }
direnv-unload() { pushd /; _direnv_hook; popd; }
dau() { direnv-unload; }

url-decode() { ruby -ne 'require "cgi"; puts(CGI.unescape($_))' }

c_() { cd ~/code/cache; }

sample() { shuf | head "-n${1:-1}"; }

tmpchrome() { dir="$(mktemp -d /tmp/chrome-XXX)"; google-chrome-stable --user-data-dir="$dir" "$@"; }

# https://stackoverflow.com/a/51141872/1687259
rmescapes() { sed 's/\x1B[@A-Z\\\]^_]\|\x1B\[[0-9:;<=>?]*[-!"#$%&'"'"'()*+,.\/]*[][\\@A-Z^_`a-z{|}~]//g'; }

## GIT

alias cgr='cd "$(git rev-parse --show-toplevel)"'

local previewer="git diff {} | tee >(grep -q . || cat {})"
gsel() { git ls-files -mo --exclude-standard | sort -u | fzf -m --preview="$previewer" | tee >(c); }
gma() { git ls-files -mo --exclude-standard | fzf -m --preview="$previewer" | xargs -r git add; }
gbrsel() { git for-each-ref --format='%(refname:short)' refs/heads | fzf; }
gksel() { git checkout "$(git for-each-ref --format='%(refname:short)' | fzf)"; }
gstsel() { gst --porcelain | sed 's/^...//' | fzf; }
gkc() { git checkout "$(c -o)"; }

git-parent() { git rev-list --ancestry-path HEAD.."$1" | tail -n1; }

gbrd() { git branch -d "$2" && git push --delete "$1" "$2" }
gbrdf() { git branch -D "$2" && git push --delete "$1" "$2" }

gahead() { ! gst --porcelain=2 -b | grep -q 'branch.ab +0'; }

gwhat() { g rev-parse --abbrev-ref "${1:-HEAD}"; }
gsha() { g rev-parse --short HEAD; }
gp() { g rev-parse --short "$@"; }
gwhatc() { gwhat | xclip -sel clipboard; }
gbu() { git branch -u "${1:-origin}/$(gwhat)"; }

grbi() { git log --format=oneline "$@" | fzf | awk '{print $1}' | xargs -r git rebase -i; }

gmb() { git merge-base HEAD "${1:-origin/master}"; };
gdmb() { git diff "$(gmb)" "$@"; }
glmb() { git l HEAD..."$(gmb)" "$@"; }
grbib() { git rebase -i "$(git merge-base HEAD "${base:-origin/master}")" "$@"; }
git-feat-edit() { feat="${1:-HEAD}"; git diff -z --name-only "$feat" "$(git merge-base "$feat" origin/master)" | xargs -r0 vim -np; }
git-feat-diff() { feat="${1:-break}" && git checkout "$feat" && base="$(git merge-base "$feat" origin/master)" && git reset "$base" && git diff -z --name-only "$feat" "$base" | xargs -r0 vim -np; }

gtmp() { name="tmp-$(date "+%Y%m%d-%H%M")-${1:-draft}" && git checkout -b "$name" && g-ac && gk -; }
grr() { git reset HEAD~; }

gprev() { file=$1; out="trash/prev/$(basename "$file")"; mkdir trash/prev -p; git show "${branch:-master}:$file" > $out; vim $out; }

gpmr() { g pf -o merge_request.create 2> >(tee >(rg -o 'http\S*' | c)); }

glinecounts() { git ls-files | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr; }
gblameg() { git grep -n "$@" | perl -F':' -anpe '$_=`git blame -L$F[1],+1 $F[0]`'; } # this is absolutely bad-ass

gmsg() { g show $'--format=%s\n\n%b' -s "$@" | tac | sed -e '/./,$!d' | tac; }

clone() {
    cldir="${dir:-$HOME/code/cache}"
    cd "$cldir";

    # remove trailing segments
    url="$(ruby -e 'u = $<.read; puts(u =~ /git(lab|hub).*com/ ? u.match(%r{(ssh|https)?://(git@)?(github|gitlab.[^\.]+).com/[^/]+/[^/]+})[0] : u)' <<< "$1")"
    dir="${2:-$(basename "$url")}"

    [ -e "$dir" ] || git clone $url "$dir"
    cd "$dir"
}

ccc() {
    clone "$(xclip -o clipboard)"
}

## RIPGREP + VIM

# sample () { shuf | head "-n${1:-1}" } # defined elsewhere
rgsample() { rg -l "$@" | sample; }
rgsample-v() { vim $(rg -l "$@" | sample); }
frg() { find . | rg "$@"; }
grg() { g ls | rg "$@"; }
grgm() { g ls | rg -v /src/test/ | rg "$@"; }
grgmedit() { vim $(g ls | rg -v /src/test/ | rg "$@"); }
rgm() { rg "$@" **/src/main; }

rgsel() { rg -l "$@" | fzf -m --preview="$previewer" | c; }

rgedit() { SEARCH="$1" vim -c 'call setreg("/", getenv("SEARCH"))' -n $(rg -l "$@"); }
rgmedit() { SEARCH="$1" vim -c 'call setreg("/", getenv("SEARCH"))' -n $(rg -l "$@" **/src/main); }
frgedit() { find . | rg "$@" | xargs -r vim -pn; }
grgedit() { vim -n $(g ls | rg "$@"); }

## SCALA

bloopgrep() { jq -r < .bloop/*.json '(.project.resolution.modules // []) | map(.artifacts | map(select(.classifier == "sources") | .path)[])[]' | sort -u | pattern="$1" parallel -P8 -N1 'sh -c "zipgrep \"\$pattern\" \"\$1\" && echo -e \"from: \$1\n\"" sh' 2&>1 | grep -v zip.bomb }
# bloopgrep() { jq -r < .bloop/*.json '(.project.resolution.modules // []) | map(.artifacts | map(select(.classifier == "sources") | .path)[])[]' | sort -u | pattern="$1" parallel -P8 -N1 'sh -c '\''zipgrep DUMPED.MESSAGES "\$1" && echo -e "from: $1\\n" sh'\' }
# bloopgrep() { jq -r < .bloop/*.json '(.project.resolution.modules // []) | map(.artifacts | map(select(.classifier == "sources") | .path)[])[]' | sort -u | pattern="$1" parallel -P8 -N1 'sh -c "zipgrep DUMPED.MESSAGES \"\$1\" && echo \"from: \$1\"" sh'\' }
# bloopgrep() { jq -r < .bloop/*.json '(.project.resolution.modules // []) | map(.artifacts | map(select(.classifier == "sources") | .path)[])[]' | sort -u | pattern="$1" xargs -rL1 sh -c 'zipgrep -i "$pattern" "$1" && echo -e from: "$1\n"' sh
# jq -r < .bloop/*.json '(.project.resolution.modules // []) | map(.artifacts | map(select(.classifier == "sources") | .path)[])[]' | sort -u | parallel -P4 -N1 'sh -c "zipgrep DUMPED.MESSAGES \$1 && echo from: \$1" sh'

## KUBECTL

kctl_ns() { kubectl --context="$kctx" get namespaces | awk '{print $1}' | fzf; }
# namespace assumed:
kpods() { kctl_ get pods -o jsonpath='{.items..metadata.name}' | tr ' ' \\n; }
kpod() { kpods | sample; }
kdeploys() { kctl_ get deployments -o jsonpath='{.items..metadata.name}'; }

## MISC

waitf() { interval=0.1 wait-diff > /dev/null 2>&1 sh -c 'ls /tmp/flag'; }
slq() { clip-pipe sh "echo -n \"\\\`\\\`\\\`\$(cat)\\\`\\\`\\\`\""; } # slack quotes
ft() { date "+%F:%T" }

## ARGUMENT DEBUG

quote() { for a in "$@"; do echo -n "'$a' "; done; echo }

## ASCIINEMA

single-line-print() { while read line; do echo -en "\033[2K\r$(cut -c-$(tput cols) <<< "$line")"; done; }
scrst() { xrandr --output HDMI1 --auto --right-of eDP1; }

## QEMU

qemu-toggle() {
    grep -q 'State.*T' /proc/$(pgrep -f qemu-system-x86_64)/status
    pkill "-$(if [ $? -eq 0 ]; then echo CONT; else echo STOP; fi)"  -f qemu-system-x86_64
}

qemu-start() { pkill -CONT -f qemu-system-x86_64; }
qemu-pause() { pkill -STOP -f qemu-system-x86_64; }

## HEROKU

if [ -z "$ZSH_DARWIN" ]; then
heroku_flags(){
  docker run -it --rm \
    -w "$HOME" \
    -u $(id -u):$(id -g) \
    -v /etc/passwd:/etc/passwd:ro \
    -v /etc/group:/etc/group:ro \
    -v /etc/localtime:/etc/localtime:ro \
    -v /home:/home \
    -v /tmp:/tmp \
    -v /run/user/$(id -u):/run/user/$(id -u) \
    -v $(pwd):/workdir \
    -w /workdir \
    --name heroku \
    "$@"
}

herokui() {
    heroku_flags -it --entrypoint bash johnnagro/heroku-toolbelt
}

heroku() {
    heroku_flags johnnagro/heroku-toolbelt "$@"
}
fi

## DICKER

dipr() { docker image prune -a --filter "until=24h"; }
dcpr() { docker container prune; }
d-ip() { docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$@"; }
d-mip() { docker-machine ip default; }

## HESBURGER

heslogin() { curl http:'//192.168.77.10/login?dst=http%3A%2F%2Ftest.lv%2F' | grep -Po 'http://192.168.77.10[^"]+' | ruby -ne 'require "cgi"; puts(CGI.unescapeHTML($_))' | xargs -r curl }
