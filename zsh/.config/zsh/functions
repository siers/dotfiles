tmpcd() { cd "$(mktemp -d /tmp/sand-XXX)"; }
tmppd() { cd "$(mktemp -d $HOME/tmp/sand-XXX)"; } # persistent
cdl() { cd $(dirlast "$1") }
cb() { cd "$(dirname "$1")"; } # cd to filename's location

pk9f() { pkill -9 -f "$@"; }

nix-revsha() { nix-prefetch-git "$@" | jq -r '"  rev = \"\(.rev)\";\n  sha256 = \"\(.sha256)\";"' | tee >(c); }
no() { a="$1"; shift; nixops "$a" -s localstate.nixops "$@"; }

tmx-sel() { tmx $(tmux ls -F '#{session_name}' | fzf); }
tda() { tmux detach -a; }

direnv-unload() { pushd /; _direnv_hook; popd; }
dau() { direnv-unload; }

# git multi-add
local previewer="git diff {} | tee >(grep -q . || cat {})"
gsel() { git ls-files -mo --exclude-standard | sort -u | fzf -m --preview="$previewer" | c; }
gma() { git ls-files -mo --exclude-standard | fzf -m --preview="$previewer" | xargs -r git add; }
grbi() { git log --format=oneline "$@" | fzf | awk '{print $1}' | xargs -r git rebase -i; }
gbrsel() { git checkout "$(git for-each-ref --format='%(refname:short)' refs/heads | fzf)"; }
gksel() { git checkout "$(git for-each-ref --format='%(refname:short)' | fzf)"; }

git-parent() { git rev-list --ancestry-path HEAD.."$1" | tail -n1; }

rgsample() { rg -l "$@" | sample; }
rgsample-v() { vim $(rg -l "$@" | sample); }
rgedit() { vim $(rg -l "$@"); }
rgsel() { rg -l "$@" | fzf -m --preview="$previewer" | c; }

f() {
    if [ -z "$1" ]; then p="$(pwd)"; else p="$1"; fi
    echo -n "file://$(realpath $p)" | tee >(xclip) | tee >(xclip -selection clip)
}

fp() {
    echo -n "$(realpath "$(if [ -z "$1" ]; then echo "$(pwd)"; else echo "$1"; fi)")" | tee >(xclip) | tee >(xclip -selection clip)
}

slq() { clip-pipe sh "echo -n \"\\\`\\\`\\\`\$(cat)\\\`\\\`\\\`\""; } # slack quotes

[ -e "$HOME/.config/zsh/temporary" ] && source ~/.config/zsh/temporary || :

# misc

# argument debug
quote() {
    for a in "$@"; do
        echo -n "'$a' "
    done; echo
}

# for asciinema
single-line-print() { while read line; do echo -en "\033[2K\r$(cut -c-$(tput cols) <<< "$line")"; done; }
scrst() { xrandr --output HDMI1 --auto --right-of eDP1; }

# qemu
qemu-toggle() {
    grep -q 'State.*T' /proc/$(pgrep -f qemu-system-x86_64)/status
    pkill "-$(if [ $? -eq 0 ]; then echo CONT; else echo STOP; fi)"  -f qemu-system-x86_64
}

qemu-start() { pkill -CONT -f qemu-system-x86_64; }
qemu-pause() { pkill -STOP -f qemu-system-x86_64; }

# heroku for nixos

if [ -z "$ZSH_DARWIN" ]; then
heroku_flags(){
  docker run -it --rm \
    -w "$HOME" \
    -u $(id -u):$(id -g) \
    -v /etc/passwd:/etc/passwd:ro \
    -v /etc/group:/etc/group:ro \
    -v /etc/localtime:/etc/localtime:ro \
    -v /home:/home \
    -v /tmp:/tmp \
    -v /run/user/$(id -u):/run/user/$(id -u) \
    -v $(pwd):/workdir \
    -w /workdir \
    --name heroku \
    "$@"
}

herokui() {
    heroku_flags -it --entrypoint bash johnnagro/heroku-toolbelt
}

heroku() {
    heroku_flags johnnagro/heroku-toolbelt "$@"
}
fi

# docker

dipr() { docker image prune -a --filter "until=24h"; }
dcpr() { docker container prune; }
d-ip() { docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$@"; }
d-mip() { docker-machine ip default; }
